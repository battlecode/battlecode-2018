//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MapLocation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MapLocation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MapLocation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MapLocation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bcPINVOKE.delete_MapLocation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public MapLocation(Planet planet, int x, int y) : this(bcPINVOKE.new_MapLocation((int)planet, x, y), true) {
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MapLocation add(Direction direction) {
    global::System.IntPtr cPtr = bcPINVOKE.MapLocation_add(swigCPtr, (int)direction);
    MapLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new MapLocation(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapLocation subtract(Direction direction) {
    global::System.IntPtr cPtr = bcPINVOKE.MapLocation_subtract(swigCPtr, (int)direction);
    MapLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new MapLocation(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapLocation add_multiple(Direction direction, int multiple) {
    global::System.IntPtr cPtr = bcPINVOKE.MapLocation_add_multiple(swigCPtr, (int)direction, multiple);
    MapLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new MapLocation(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapLocation translate(int dx, int dy) {
    global::System.IntPtr cPtr = bcPINVOKE.MapLocation_translate(swigCPtr, dx, dy);
    MapLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new MapLocation(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint distance_squared_to(MapLocation o) {
    uint ret = bcPINVOKE.MapLocation_distance_squared_to(swigCPtr, MapLocation.getCPtr(o));
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Direction direction_to(MapLocation o) {
    Direction ret = (Direction)bcPINVOKE.MapLocation_direction_to(swigCPtr, MapLocation.getCPtr(o));
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte is_adjacent_to(MapLocation o) {
    byte ret = bcPINVOKE.MapLocation_is_adjacent_to(swigCPtr, MapLocation.getCPtr(o));
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte is_within_range(uint range, MapLocation o) {
    byte ret = bcPINVOKE.MapLocation_is_within_range(swigCPtr, range, MapLocation.getCPtr(o));
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string debug() {
    string ret = bcPINVOKE.MapLocation_debug(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapLocation clone() {
    global::System.IntPtr cPtr = bcPINVOKE.MapLocation_clone(swigCPtr);
    MapLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new MapLocation(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte eq(MapLocation other) {
    byte ret = bcPINVOKE.MapLocation_eq(swigCPtr, MapLocation.getCPtr(other));
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string to_json() {
    string ret = bcPINVOKE.MapLocation_to_json(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Planet planet {
    set {
      bcPINVOKE.MapLocation_planet_set(swigCPtr, (int)value);
      if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      Planet ret = (Planet)bcPINVOKE.MapLocation_planet_get(swigCPtr);
      if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int x {
    set {
      bcPINVOKE.MapLocation_x_set(swigCPtr, value);
      if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = bcPINVOKE.MapLocation_x_get(swigCPtr);
      if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int y {
    set {
      bcPINVOKE.MapLocation_y_set(swigCPtr, value);
      if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = bcPINVOKE.MapLocation_y_get(swigCPtr);
      if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
