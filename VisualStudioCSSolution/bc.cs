//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class bc {
  public static Planet Planet_other(Planet arg0) {
    Planet ret = (Planet)bcPINVOKE.Planet_other((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Planet_debug(Planet arg0) {
    string ret = bcPINVOKE.Planet_debug((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte Planet_eq(Planet arg0, Planet other) {
    byte ret = bcPINVOKE.Planet_eq((int)arg0, (int)other);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Planet Planet_from_json(string s) {
    Planet ret = (Planet)bcPINVOKE.Planet_from_json(s);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Planet_to_json(Planet arg0) {
    string ret = bcPINVOKE.Planet_to_json((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int Direction_dx(Direction arg0) {
    int ret = bcPINVOKE.Direction_dx((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int Direction_dy(Direction arg0) {
    int ret = bcPINVOKE.Direction_dy((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte Direction_is_diagonal(Direction arg0) {
    byte ret = bcPINVOKE.Direction_is_diagonal((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Direction Direction_opposite(Direction arg0) {
    Direction ret = (Direction)bcPINVOKE.Direction_opposite((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Direction Direction_rotate_left(Direction arg0) {
    Direction ret = (Direction)bcPINVOKE.Direction_rotate_left((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Direction Direction_rotate_right(Direction arg0) {
    Direction ret = (Direction)bcPINVOKE.Direction_rotate_right((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Direction Direction_from_json(string s) {
    Direction ret = (Direction)bcPINVOKE.Direction_from_json(s);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Direction_to_json(Direction arg0) {
    string ret = bcPINVOKE.Direction_to_json((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MapLocation MapLocation_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.MapLocation_from_json(s);
    MapLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new MapLocation(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Location Location_new_on_map(MapLocation map_location) {
    global::System.IntPtr cPtr = bcPINVOKE.Location_new_on_map(MapLocation.getCPtr(map_location));
    Location ret = (cPtr == global::System.IntPtr.Zero) ? null : new Location(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Location Location_new_in_garrison(ushort id) {
    global::System.IntPtr cPtr = bcPINVOKE.Location_new_in_garrison(id);
    Location ret = (cPtr == global::System.IntPtr.Zero) ? null : new Location(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Location Location_new_in_space() {
    global::System.IntPtr cPtr = bcPINVOKE.Location_new_in_space();
    Location ret = (cPtr == global::System.IntPtr.Zero) ? null : new Location(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Location Location_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.Location_from_json(s);
    Location ret = (cPtr == global::System.IntPtr.Zero) ? null : new Location(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Team Team_from_json(string s) {
    Team ret = (Team)bcPINVOKE.Team_from_json(s);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string Team_to_json(Team arg0) {
    string ret = bcPINVOKE.Team_to_json((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Player Player_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.Player_from_json(s);
    Player ret = (cPtr == global::System.IntPtr.Zero) ? null : new Player(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnitType UnitType_from_json(string s) {
    UnitType ret = (UnitType)bcPINVOKE.UnitType_from_json(s);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string UnitType_to_json(UnitType arg0) {
    string ret = bcPINVOKE.UnitType_to_json((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint UnitType_factory_cost(UnitType arg0) {
    uint ret = bcPINVOKE.UnitType_factory_cost((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint UnitType_blueprint_cost(UnitType arg0) {
    uint ret = bcPINVOKE.UnitType_blueprint_cost((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint UnitType_replicate_cost(UnitType arg0) {
    uint ret = bcPINVOKE.UnitType_replicate_cost((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint UnitType_value(UnitType arg0) {
    uint ret = bcPINVOKE.UnitType_value((int)arg0);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Unit Unit_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.Unit_from_json(s);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlanetMap PlanetMap_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.PlanetMap_from_json(s);
    PlanetMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new PlanetMap(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Delta Delta_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.Delta_from_json(s);
    Delta ret = (cPtr == global::System.IntPtr.Zero) ? null : new Delta(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StartGameMessage StartGameMessage_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.StartGameMessage_from_json(s);
    StartGameMessage ret = (cPtr == global::System.IntPtr.Zero) ? null : new StartGameMessage(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TurnMessage TurnMessage_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.TurnMessage_from_json(s);
    TurnMessage ret = (cPtr == global::System.IntPtr.Zero) ? null : new TurnMessage(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StartTurnMessage StartTurnMessage_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.StartTurnMessage_from_json(s);
    StartTurnMessage ret = (cPtr == global::System.IntPtr.Zero) ? null : new StartTurnMessage(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ViewerMessage ViewerMessage_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.ViewerMessage_from_json(s);
    ViewerMessage ret = (cPtr == global::System.IntPtr.Zero) ? null : new ViewerMessage(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ViewerKeyframe ViewerKeyframe_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.ViewerKeyframe_from_json(s);
    ViewerKeyframe ret = (cPtr == global::System.IntPtr.Zero) ? null : new ViewerKeyframe(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ErrorMessage ErrorMessage_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.ErrorMessage_from_json(s);
    ErrorMessage ret = (cPtr == global::System.IntPtr.Zero) ? null : new ErrorMessage(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AsteroidStrike AsteroidStrike_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.AsteroidStrike_from_json(s);
    AsteroidStrike ret = (cPtr == global::System.IntPtr.Zero) ? null : new AsteroidStrike(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AsteroidPattern AsteroidPattern_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.AsteroidPattern_from_json(s);
    AsteroidPattern ret = (cPtr == global::System.IntPtr.Zero) ? null : new AsteroidPattern(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OrbitPattern OrbitPattern_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.OrbitPattern_from_json(s);
    OrbitPattern ret = (cPtr == global::System.IntPtr.Zero) ? null : new OrbitPattern(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GameMap GameMap_test_map() {
    global::System.IntPtr cPtr = bcPINVOKE.GameMap_test_map();
    GameMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameMap(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GameMap GameMap_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.GameMap_from_json(s);
    GameMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameMap(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint max_level(UnitType branch) {
    uint ret = bcPINVOKE.max_level((int)branch);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint cost_of(UnitType branch, uint level) {
    uint ret = bcPINVOKE.cost_of((int)branch, level);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ResearchInfo ResearchInfo_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.ResearchInfo_from_json(s);
    ResearchInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResearchInfo(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RocketLanding RocketLanding_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.RocketLanding_from_json(s);
    RocketLanding ret = (cPtr == global::System.IntPtr.Zero) ? null : new RocketLanding(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RocketLandingInfo RocketLandingInfo_from_json(string s) {
    global::System.IntPtr cPtr = bcPINVOKE.RocketLandingInfo_from_json(s);
    RocketLandingInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new RocketLandingInfo(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GameController GameController_new_manager(GameMap map) {
    global::System.IntPtr cPtr = bcPINVOKE.GameController_new_manager(GameMap.getCPtr(map));
    GameController ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameController(cPtr, true);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
