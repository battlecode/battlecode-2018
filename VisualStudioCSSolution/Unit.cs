//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Unit : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Unit(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Unit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Unit() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bcPINVOKE.delete_Unit(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Unit() : this(bcPINVOKE.new_Unit(), true) {
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
  }

  public string debug() {
    string ret = bcPINVOKE.Unit_debug(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Unit clone() {
    global::System.IntPtr cPtr = bcPINVOKE.Unit_clone(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string to_json() {
    string ret = bcPINVOKE.Unit_to_json(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte eq(Unit other) {
    byte ret = bcPINVOKE.Unit_eq(swigCPtr, Unit.getCPtr(other));
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort id() {
    ushort ret = bcPINVOKE.Unit_id(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Team team() {
    Team ret = (Team)bcPINVOKE.Unit_team(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint research_level() {
    uint ret = bcPINVOKE.Unit_research_level(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UnitType unit_type() {
    UnitType ret = (UnitType)bcPINVOKE.Unit_unit_type(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Location location() {
    global::System.IntPtr cPtr = bcPINVOKE.Unit_location(swigCPtr);
    Location ret = (cPtr == global::System.IntPtr.Zero) ? null : new Location(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint health() {
    uint ret = bcPINVOKE.Unit_health(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint max_health() {
    uint ret = bcPINVOKE.Unit_max_health(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint vision_range() {
    uint ret = bcPINVOKE.Unit_vision_range(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int damage() {
    int ret = bcPINVOKE.Unit_damage(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint attack_range() {
    uint ret = bcPINVOKE.Unit_attack_range(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint movement_heat() {
    uint ret = bcPINVOKE.Unit_movement_heat(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint attack_heat() {
    uint ret = bcPINVOKE.Unit_attack_heat(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint movement_cooldown() {
    uint ret = bcPINVOKE.Unit_movement_cooldown(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint attack_cooldown() {
    uint ret = bcPINVOKE.Unit_attack_cooldown(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte is_ability_unlocked() {
    byte ret = bcPINVOKE.Unit_is_ability_unlocked(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint ability_heat() {
    uint ret = bcPINVOKE.Unit_ability_heat(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint ability_cooldown() {
    uint ret = bcPINVOKE.Unit_ability_cooldown(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint ability_range() {
    uint ret = bcPINVOKE.Unit_ability_range(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte worker_has_acted() {
    byte ret = bcPINVOKE.Unit_worker_has_acted(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint worker_build_health() {
    uint ret = bcPINVOKE.Unit_worker_build_health(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint worker_repair_health() {
    uint ret = bcPINVOKE.Unit_worker_repair_health(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint worker_harvest_amount() {
    uint ret = bcPINVOKE.Unit_worker_harvest_amount(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint knight_defense() {
    uint ret = bcPINVOKE.Unit_knight_defense(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint ranger_cannot_attack_range() {
    uint ret = bcPINVOKE.Unit_ranger_cannot_attack_range(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint ranger_max_countdown() {
    uint ret = bcPINVOKE.Unit_ranger_max_countdown(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte ranger_is_sniping() {
    byte ret = bcPINVOKE.Unit_ranger_is_sniping(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapLocation ranger_target_location() {
    global::System.IntPtr cPtr = bcPINVOKE.Unit_ranger_target_location(swigCPtr);
    MapLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new MapLocation(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint ranger_countdown() {
    uint ret = bcPINVOKE.Unit_ranger_countdown(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint healer_self_heal_amount() {
    uint ret = bcPINVOKE.Unit_healer_self_heal_amount(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte structure_is_built() {
    byte ret = bcPINVOKE.Unit_structure_is_built(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint structure_max_capacity() {
    uint ret = bcPINVOKE.Unit_structure_max_capacity(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VecUnitID structure_garrison() {
    global::System.IntPtr cPtr = bcPINVOKE.Unit_structure_garrison(swigCPtr);
    VecUnitID ret = (cPtr == global::System.IntPtr.Zero) ? null : new VecUnitID(cPtr, false);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte is_factory_producing() {
    byte ret = bcPINVOKE.Unit_is_factory_producing(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UnitType factory_unit_type() {
    UnitType ret = (UnitType)bcPINVOKE.Unit_factory_unit_type(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint factory_rounds_left() {
    uint ret = bcPINVOKE.Unit_factory_rounds_left(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint factory_max_rounds_left() {
    uint ret = bcPINVOKE.Unit_factory_max_rounds_left(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte rocket_is_used() {
    byte ret = bcPINVOKE.Unit_rocket_is_used(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int rocket_blast_damage() {
    int ret = bcPINVOKE.Unit_rocket_blast_damage(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint rocket_travel_time_decrease() {
    uint ret = bcPINVOKE.Unit_rocket_travel_time_decrease(swigCPtr);
    if (bcPINVOKE.SWIGPendingException.Pending) throw bcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
